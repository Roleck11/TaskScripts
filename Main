if not game:IsLoaded() then
    while not game:IsLoaded() do wait(1) end
end

print("Executed Roleck Task Script")
repeat task.wait() until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")

if game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
  v:Disable()
end


for i, v in pairs(debug.getupvalue(require(game:GetService("ReplicatedStorage").Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end

---------------- Warn Control ---------------------------------
local old;old = hookfunction(warn,function(data)
    if data == "Tested pet entity pathfinding for a path that is too far away from its target!" then 
       return 
   end
   if data == "Tested pet entity pathfinding for a path that is too far away from its target!" or
      data == "[Pathfinder] Pathfinder Failed:" or
      data:match("AccurateTime sync inaccuracy, varianc") or
      data == "[AvatarEditorFocusSwitcher] Player's Character is nil" or
      data:match("[CharacterHider]") or
      data:match("Player:Move") or
      data:match("Notch") then
       return
   end
   return old(data)
end)
---------------------------------------------------------------

getgenv().firesignal = function(signal, ...)
	local connections = getconnections(signal)
	for _, connection in ipairs(connections) do
		connection:Fire(...)
	end
end

function clickUiButton(button, state)
    local buttonPosX = button.AbsolutePosition.X + button.AbsoluteSize.X / 2
    local buttonPosY = button.AbsolutePosition.Y + 66
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(buttonPosX, buttonPosY, 0, state, game, 1)
end

repeat
    if game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible then
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Click)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.MouseButton1Down)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Activated)
    end
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Visible then
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Click)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.MouseButton1Down)
        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RoleChooserDialog.ChooseParent.Activated)
    end
    task.wait(1.1)
    -- After Choose Parent
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("DailyLoginApp")
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled and game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end 
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end
        end
    end
until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")

task.spawn(function()
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    task.wait(4)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("DailyLoginApp")
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled and game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
                wait(0.5)
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end 
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickUiButton(v,true)
                task.wait()
                clickUiButton(v,false)
            end
        end
    end
end)

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
  v:Disable()
end

------- Transition App Disabled (whatever it is) --------
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).transition = function() return end 
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).sudden_fill = function() return end
if game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end
---------------------------------------------------
local Fsys = require(game:GetService("ReplicatedStorage"):WaitForChild("Fsys")).load

game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").WalkSpeed = 0 -- Disable Walkspeed

local args = {
    [1] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AvatarAPI/SetPlayerOnPlayerCollision"):FireServer(unpack(args))

---------------- Equip Pet ----------------------

Pets = {}
local Player = game:GetService("Players").LocalPlayer

function RoT(t)
return t[math.random(1, #t)]
end

for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
    if v.properties.age == 6 then        
        table.insert(Pets, i)
    end
end

if #Pets == 0 then
    Pets = {}
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do    
        table.insert(Pets, i)
    end
end
local MainPet = RoT(Pets)

function EquipMainPet()
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Unequip"):InvokeServer(MainPet)
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(MainPet)
end

EquipMainPet()
wait(2)
-- Main --

PetName = Fsys("ClientData").get("pet_char_wrapper")["char"]
print("======= Pet Name: ", PetName)

spawn(function()
    while true and wait(60) do
        if not game.Workspace.Pets:FindFirstChild(tostring(PetName)) then 
            EquipMainPet()
        end
    end
end)


local Player = game.Players.LocalPlayer
local player = game.Players.LocalPlayer
local character = player.Character
local get_thread_context = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local get_thread_identity = get_thread_context
local set_thread_context = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local set_thread_identity = set_thread_context

local Baths = {
    "StylishShower",
    "CheapBathtub",
    "ModernShower",
    "Bathtub",
    "GingerbreadShower",
    "HotTub"
}

local Beds = {
    "FancyPetBed",
    "ModernPetBed",
    "CircularPetBed",
    "RectangularPetBed",
    "NormalCrib",
    "BasicCrib",
    "RoyalCrib",
    "PoshCrib",
}

local LocationFunction
LocationFunction = Fsys("InteriorsM").enter_smooth

function SetLocation(a, b, c)
    local k = get_thread_identity()
    set_thread_identity(4)
    LocationFunction(a,b,c)
    set_thread_identity(k)
end 

local GoToMainMap = function()
    SetLocation("MainMap", "Neighborhood/MainDoor")
    return false
end

local GoToHome = function()
    SetLocation("housing", "MainDoor", {["house_owner"] = Player})
    Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -8))
    return false
end

local GoToPlace = function(Name)
    SetLocation(Name, "MainDoor", {})
end

---------------- Function Tasks ------------------

-- Food / Hungry Task
function HungryTask()
    local Player = game.Players.LocalPlayer
    game.ReplicatedStorage:FindFirstChild("ShopAPI/BuyItem",true):InvokeServer('food', 'pizza', {})
    game.ReplicatedStorage:FindFirstChild("ToolAPI/BakeItem",true):InvokeServer()
    while Player.Character:FindFirstChild('PizzaTool') do wait() end
    while not Player.Character:FindFirstChild('PizzaTool') do wait() end
    local Foods = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food or {}
    local Pizza
    for i,v in pairs(Foods) do
        if v.id == 'pizza' then
            Pizza = v.unique
            break
        end
    end
    if not Pizza then
        return
    end
    wait(2)
    game.ReplicatedStorage:FindFirstChild("PetObjectAPI/CreatePetObject",true):InvokeServer("__Enum_PetObjectCreatorType_2", {["unique_id"] = Pizza})
    wait(1)
    game.ReplicatedStorage:FindFirstChild("PetAPI/ConsumeFoodItem",true):FireServer(Pizza)
end

-- Dirty / Shower Task

function DirtyTask()
    GoToHome()
    wait(2)

    local Showers = function(Name)
        Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6)) 
        for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
            if v:FindFirstChildWhichIsA("Model") and (table.find(Baths, v:FindFirstChildWhichIsA("Model").Name)) then
                local String = string.split(v.Name,"true/")[2]
                return String
            end
        end
    end

    local args = {
        [1] = game:GetService("Players").LocalPlayer,
        [2] = Showers(),
        [3] = "UseBlock",
        [4] = {
            ["cframe"] = Player.Character.HumanoidRootPart.CFrame
        },
        [5] = PetName
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end

-- Sleeping Task

function SleepyTask()
    GoToHome()
    wait(2)

    local Bed = function(Name)
        Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6)) 
        for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
            if v:FindFirstChildWhichIsA("Model") and (table.find(Beds, v:FindFirstChildWhichIsA("Model").Name)) then
                local String = string.split(v.Name,"/f")[2]
                return "f".. String
            end
        end
    end

    local args = {
        [1] = game:GetService("Players").LocalPlayer,
        [2] = Bed(),
        [3] = "UseBlock",
        [4] = {
            ["cframe"] = Player.Character.HumanoidRootPart.CFrame
        },
        [5] = PetName
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end

-- Thirsty Task

function ThirstyTask()
    game.ReplicatedStorage:FindFirstChild("ShopAPI/BuyItem",true):InvokeServer('food', 'tea', {})
    local Foods = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.food or {}
    local Tea
    for i, v in pairs(Foods) do
        if v.id == 'tea' then
            Tea = v.unique
            break
        end
    end
    if not Tea then
        return
    end
    wait(2)
    game.ReplicatedStorage:FindFirstChild("PetObjectAPI/CreatePetObject",true):InvokeServer("__Enum_PetObjectCreatorType_2", {["unique_id"] = Tea})
    game.ReplicatedStorage:FindFirstChild("PetAPI/ConsumeFoodItem",true):FireServer(Tea)
end

-- School Task
function SchoolTask()
    GoToPlace('School')
    wait(1)
    School = workspace.Interiors:FindFirstChild("School")
    if School then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.School.WorldPivot.Position + Vector3.new(0, 0, -50))
    end
end

-- Sick / Hospital Task
function SickTask()
    game.ReplicatedStorage:FindFirstChild("MonitorAPI/HealWithDoctor",true):FireServer()
end

-- Pizza Party Task
function PizzaPartyTask()
    GoToPlace("PizzaShop")
    wait(1)
    PizzaShop = workspace.Interiors:FindFirstChild("PizzaShop")
    if PizzaShop then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.PizzaShop.WorldPivot.Position + Vector3.new(0, 0, -50))
    end
end

-- Bored / Playground Task
function BoredTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Park.AilmentTarget.Position + Vector3.new(0, 5, 0))
end

-- Camping Task
function CampingTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Campsite.CampsiteOrigin.Position + Vector3.new(0, 5, 0))
end

-- Pool Party Task
function PoolPartyTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Pool.PoolOrigin.Position + Vector3.new(0, 5, 0))
end

-- Salon Task
function SalonTask()
    GoToPlace("Salon")
    wait(1)
    Salon = workspace.Interiors:FindFirstChild("Salon")
    if Salon then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.Salon.WorldPivot.Position + Vector3.new(0, 0, -10))
    end
end

-- Adoption Party Task
function AdoptionPartyTask()
    GoToPlace('Nursery')
    wait(1)
    Nursery = workspace.Interiors:FindFirstChild("Nursery")
    if Nursery then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.Nursery.WorldPivot.Position + Vector3.new(0, 0, -10))
    end
end

--------------- Main Tasks ---------------
local player = game.Players.LocalPlayer
local taskNames = {
    "hungry",
    "thirsty",
    "sleepy",
    "bored",
    "dirty",
    "camping",
    "sick",
    "school",
    "pool_party",
    "salon",
    "pizza_party"
}

local ailmentMonitor = player.PlayerGui.AilmentsMonitorApp.Ailments

while true do
    wait(1)  -- Adjust the interval as needed

    for _, taskName in pairs(taskNames) do
        if ailmentMonitor:FindFirstChild(taskName) then
            -- Execute corresponding code based on the task name
            local success, errorMessage = pcall(function()
                if taskName == "hungry" then
                    print("Hungry task appeared.")
                    HungryTask()
                elseif taskName == "thirsty" then
                    print("Thirsty task appeared.")
                    ThirstyTask()
                elseif taskName == "sleepy" then
                    print("Sleepy task appeared.")
                    SleepyTask()
                elseif taskName == "bored" then
                    print("Bored task appeared.")
                    BoredTask()
                elseif taskName == "dirty" then
                    print("Dirty task appeared.")
                    DirtyTask()
                elseif taskName == "camping" then
                    print("Camping task appeared.")
                    CampingTask()
                elseif taskName == "sick" then
                    print("Sick task appeared.")
                    SickTask()
                elseif taskName == "school" then
                    print("School task appeared.")
                    SchoolTask()
                elseif taskName == "pool_party" then
                    print("Pool party task appeared.")
                    PoolPartyTask()
                elseif taskName == "salon" then
                    print("Salon task appeared.")
                    SalonTask()
                elseif taskName == "pizza_party" then
                    print("Pizza Party task appeared.")
                    PizzaPartyTask()
                end

                -- Wait until the task is removed from the Ailments Monitor or timeout after 60 seconds
                local timeout = 60
                repeat
                    wait(1)
                    timeout = timeout - 1
                until not ailmentMonitor:FindFirstChild(taskName) or timeout <= 0

                if not #workspace.Interiors:GetChildren() == 0 then
                    wait(60)
                    GoToHome()
                end
            end)

            if not success then
                warn("An error occurred while executing the task: " .. errorMessage)
            end
        end
    end
end
