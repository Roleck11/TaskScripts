local Player = game.Players.LocalPlayer
local player = game.Players.LocalPlayer
local character = player.Character
local get_thread_context = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local get_thread_identity = get_thread_context
local set_thread_context = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local set_thread_identity = set_thread_context

local Baths = {
    "StylishShower",
    "CheapBathtub",
    "ModernShower",
    "Bathtub",
    "GingerbreadShower",
    "HotTub"
}

local Beds = {
    "FancyPetBed",
    "ModernPetBed",
    "CircularPetBed",
    "RectangularPetBed",
    "NormalCrib",
    "BasicCrib",
    "RoyalCrib",
    "PoshCrib",
}

local Location = nil
for i, v in pairs(getgc()) do
    if type(v) == "function" then
        if getfenv(v).script == game.ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM then
            if table.find(getconstants(v), "LocationAPI/SetLocation") then
                Location = v
                break
            end
        end
    end
end

local SetLocation = function(A, B, C)
    local O = get_thread_identity()
    set_thread_identity(2)
    Location(A, B, C)
    set_thread_identity(O)
end

local GoToMainMap = function()
    SetLocation("MainMap", "Neighborhood/MainDoor")
    return false
end

local GoToHome = function()
    SetLocation("housing", "MainDoor", {["house_owner"] = Player})
    Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -8))
    return false
end

local GoToPlace = function(Name)
    SetLocation(Name, "MainDoor", {})
end

---------------- Function Tasks ------------------

-- Food / Hungry Task
function HungryTask()
    local Player = game.Players.LocalPlayer
    game.ReplicatedStorage:FindFirstChild("ShopAPI/BuyItem",true):InvokeServer('food', 'pizza', {})
    game.ReplicatedStorage:FindFirstChild("ToolAPI/BakeItem",true):InvokeServer()
    while Player.Character:FindFirstChild('PizzaTool') do wait() end
    while not Player.Character:FindFirstChild('PizzaTool') do wait() end
    local Foods = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food or {}
    local Pizza
    for i,v in pairs(Foods) do
        if v.id == 'pizza' then
            Pizza = v.unique
            break
        end
    end
    if not Pizza then
        return
    end
    wait(2)
    game.ReplicatedStorage:FindFirstChild("PetObjectAPI/CreatePetObject",true):InvokeServer("__Enum_PetObjectCreatorType_2", {["unique_id"] = Pizza})
    wait(1)
    game.ReplicatedStorage:FindFirstChild("PetAPI/ConsumeFoodItem",true):FireServer(Pizza)
end

-- Dirty / Shower Task

function DirtyTask()
    GoToHome()
    wait(2)

    local Showers = function(Name)
        Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6)) 
        for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
            if v:FindFirstChildWhichIsA("Model") and (table.find(Baths, v:FindFirstChildWhichIsA("Model").Name)) then
                local String = string.split(v.Name,"true/")[2]
                return String
            end
        end
    end

    local args = {
        [1] = game:GetService("Players").LocalPlayer,
        [2] = Showers(),
        [3] = "UseBlock",
        [4] = {
            ["cframe"] = Player.Character.HumanoidRootPart.CFrame
        },
        [5] = Fsys("ClientData").get("pet_char_wrapper").char
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end

-- Sleeping Task

function SleepyTask()
    GoToHome()
    wait(2)

    local Bed = function(Name)
        Player.Character.HumanoidRootPart.CFrame = Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA('Model'):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6)) 
        for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
            if v:FindFirstChildWhichIsA("Model") and (table.find(Beds, v:FindFirstChildWhichIsA("Model").Name)) then
                local String = string.split(v.Name,"/f")[2]
                return "f".. String
            end
        end
    end

    local args = {
        [1] = game:GetService("Players").LocalPlayer,
        [2] = Bed(),
        [3] = "UseBlock",
        [4] = {
            ["cframe"] = Player.Character.HumanoidRootPart.CFrame
        },
        [5] = Fsys("ClientData").get("pet_char_wrapper").char
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
end

-- Thirsty Task

function ThirstyTask()
    game.ReplicatedStorage:FindFirstChild("ShopAPI/BuyItem",true):InvokeServer('food', 'tea', {})
    local Foods = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.food or {}
    local Tea
    for i, v in pairs(Foods) do
        if v.id == 'tea' then
            Tea = v.unique
            break
        end
    end
    if not Tea then
        return
    end
    wait(2)
    game.ReplicatedStorage:FindFirstChild("PetObjectAPI/CreatePetObject",true):InvokeServer("__Enum_PetObjectCreatorType_2", {["unique_id"] = Tea})
    game.ReplicatedStorage:FindFirstChild("PetAPI/ConsumeFoodItem",true):FireServer(Tea)
end

-- School Task
function SchoolTask()
    GoToPlace('School')
    wait(1)
    School = workspace.Interiors:FindFirstChild("School")
    if School then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.School.WorldPivot.Position + Vector3.new(0, 0, -50))
    end
end

-- Sick / Hospital Task
function SickTask()
    game.ReplicatedStorage:FindFirstChild("MonitorAPI/HealWithDoctor",true):FireServer()
end

-- Pizza Party Task
function PizzaPartyTask()
    GoToPlace("PizzaShop")
    wait(1)
    PizzaShop = workspace.Interiors:FindFirstChild("PizzaShop")
    if PizzaShop then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.PizzaShop.WorldPivot.Position + Vector3.new(0, 0, -50))
    end
end

-- Bored / Playground Task
function BoredTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Park.AilmentTarget.Position + Vector3.new(0, 5, 0))
end

-- Camping Task
function CampingTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Campsite.CampsiteOrigin.Position + Vector3.new(0, 5, 0))
end

-- Pool Party Task
function PoolPartyTask()
    GoToMainMap()
    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Workspace.StaticMap.Pool.PoolOrigin.Position + Vector3.new(0, 5, 0))
end

-- Salon Task
function SalonTask()
    GoToPlace("Salon")
    wait(1)
    Salon = workspace.Interiors:FindFirstChild("Salon")
    if Salon then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.Salon.WorldPivot.Position + Vector3.new(0, 0, -10))
    end
end

-- Adoption Party Task
function AdoptionPartyTask()
    GoToPlace('Nursery')
    wait(1)
    Nursery = workspace.Interiors:FindFirstChild("Nursery")
    if Nursery then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.Nursery.WorldPivot.Position + Vector3.new(0, 0, -10))
    end
end

--------------- Main Tasks ---------------
local player = game.Players.LocalPlayer
local taskNames = {
    "hungry",
    "thirsty",
    "sleepy",
    "bored",
    "dirty",
    "camping",
    "sick",
    "school",
    "pool_party",
    "salon",
    "pizza_party"
}

local ailmentMonitor = player.PlayerGui.AilmentsMonitorApp.Ailments

------------------------------ ========================
_G.CountBatch = 0

while true do
    wait(1)  -- Adjust the interval as needed
    local SuccessFUL, ErrorMsg = pcall(function()
        for _, taskName in pairs(taskNames) do
            if ailmentMonitor:FindFirstChild(taskName) then
                -- Execute corresponding code based on the task name
                local success, errorMessage = pcall(function()
                    if taskName == "hungry" then
                        print("Hungry task appeared.")
                        HungryTask()
                    elseif taskName == "thirsty" then
                        print("Thirsty task appeared.")
                        ThirstyTask()
                    elseif taskName == "sleepy" then
                        print("Sleepy task appeared.")
                        SleepyTask()
                    elseif taskName == "bored" then
                        print("Bored task appeared.")
                        BoredTask()
                    elseif taskName == "dirty" then
                        print("Dirty task appeared.")
                        DirtyTask()
                    elseif taskName == "camping" then
                        print("Camping task appeared.")
                        CampingTask()
                    elseif taskName == "sick" then
                        print("Sick task appeared.")
                        SickTask()
                    elseif taskName == "school" then
                        print("School task appeared.")
                        SchoolTask()
                    elseif taskName == "pool_party" then
                        print("Pool party task appeared.")
                        PoolPartyTask()
                    elseif taskName == "salon" then
                        print("Salon task appeared.")
                        SalonTask()
                    elseif taskName == "pizza_party" then
                        print("Pizza Party task appeared.")
                        PizzaPartyTask()
                    end

                    -- Wait until the task is removed from the Ailments Monitor or timeout after 60 seconds
                    local timeout = 60
                    repeat
                        wait(1)
                        timeout = timeout - 1
                    until not ailmentMonitor:FindFirstChild(taskName) or timeout <= 0
                end)

                if not success then
                    print("An error occurred while executing the task: " .. errorMessage)
                end
            end
        end
    end)
    if not SuccessFUL then
        _G.CountBatch = _G.CountBatch + 1
        print("=========================")
        print(ErrorMsg)
        print("=========================")
        print("Unsuccessful Batches =" .. _G.CountBatch)
    end
end
